From f7ff42acaf6ccdf540cc41c4198d7e7f5ac8c242 Mon Sep 17 00:00:00 2001
From: Niyas Sait <niyassait@gmail.com>
Date: Sun, 6 Aug 2023 12:31:58 +0100
Subject: [PATCH 3/5] before moving clk register to clk get

---
 drivers/acpi/Makefile |  1 +
 drivers/acpi/clock.c  | 86 -------------------------------------------
 drivers/acpi/scan.c   |  2 +-
 drivers/clk/clkdev.c  | 14 +++++--
 4 files changed, 13 insertions(+), 90 deletions(-)
 delete mode 100644 drivers/acpi/clock.c

diff --git a/drivers/acpi/Makefile b/drivers/acpi/Makefile
index 2979bf81c431..c606bae27177 100644
--- a/drivers/acpi/Makefile
+++ b/drivers/acpi/Makefile
@@ -69,6 +69,7 @@ acpi-$(CONFIG_ACPI_WATCHDOG)	+= acpi_watchdog.o
 acpi-$(CONFIG_ACPI_PRMT)	+= prmt.o
 acpi-$(CONFIG_ACPI_PCC)		+= acpi_pcc.o
 acpi-$(CONFIG_ACPI_FFH)		+= acpi_ffh.o
+acpi-y				+= acpi_clk.o
 
 # Address translation
 acpi-$(CONFIG_ACPI_ADXL)	+= acpi_adxl.o
diff --git a/drivers/acpi/clock.c b/drivers/acpi/clock.c
deleted file mode 100644
index 850e0fd9359d..000000000000
--- a/drivers/acpi/clock.c
+++ /dev/null
@@ -1,86 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * drivers/acpi/clock.c - ACPI device clock resources support.
- *
- */
-
-#include <linux/acpi.h>
-
-
-struct clock_resource_crs_walk_ctxt {
-	int current_index;
-	struct acpi_device *adev;
-	uint64_t rate;
-	bool found;
-};
-
-
-static uint64_t calc_clock_rate(struct acpi_resource_clock_input *res)
-{
-	uint32_t scale[3] = {1, 1000, 1000000};
-
-	// TODO: add error check
-	return DIV_ROUND_UP(res->frequency_numerator * scale[res->scale],
-			    res->frequency_divisor);
-}
-
-void acpi_dev_register_fixed_rate_clock(struct acpi_device *adev, int index, struct acpi_resource_clock_input *res){
-		struct clk *clk;
-		uint64_t rate;
-		
-		rate = calc_clock_rate(res);
-		clk_register_fixed_rate(&adev->dev, dev_name(&adev->dev), NULL, 0, rate);
-		clk_register_clkdev(clk, NULL, dev_name(&adev->dev));
-}
-
-static int walk_clock_input_resource(struct acpi_resource *ares, void *data)
-{
-	struct clock_resource_crs_walk_ctxt *ctxt = data;
-	struct acpi_resource_clock_input *resource = &ares->data.clock_input;
-
-	if (ares->type == ACPI_RESOURCE_TYPE_CLOCK_INPUT) {
-			resource = &ares->data.clock_input;
-			switch(resource->mode){
-				case 0: // FIXED
-					ctxt->rate = calc_clock_rate(resource);
-					// acpi_dev_register_fixed_rate_clock(ctxt->adev, ctxt->current_index, resource);
-				default:
-					break;
-			}
-	}
-
-	return 1;
-}
-
-struct clk_hw *acpi_clk_get_hw(struct acpi_device *adev, int index, const char *con_id)
-{
-	struct clock_resource_crs_walk_ctxt ctxt;
-	struct list_head list;
-
-	INIT_LIST_HEAD(&list);
-	ctxt.current_index = 0;
-	ctxt.adev = adev;
-
-	acpi_dev_get_resources(adev, &list, walk_clock_input_resource, &ctxt);
-
-	acpi_dev_free_resource_list(&list);
-
-	return;
-
-}
-
-void acpi_dev_register_clock_resources(struct acpi_device *adev)
-{
-	struct clock_resource_crs_walk_ctxt ctxt;
-	struct list_head list;
-
-	INIT_LIST_HEAD(&list);
-	ctxt.current_index = 0;
-	ctxt.adev = adev;
-
-	acpi_dev_get_resources(adev, &list, walk_clock_input_resource, &ctxt);
-
-	acpi_dev_free_resource_list(&list);
-
-	return;
-}
\ No newline at end of file
diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index 333d2909107b..ba1e8224d440 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -1805,7 +1805,7 @@ void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
 	device_initialize(&device->dev);
 	dev_set_uevent_suppress(&device->dev, true);
 	acpi_init_coherency(device);
-	acpi_dev_register_clock_resources(device);
+	// acpi_clk_register(device, 0);
 }
 
 static void acpi_scan_dep_init(struct acpi_device *adev)
diff --git a/drivers/clk/clkdev.c b/drivers/clk/clkdev.c
index 4df47bfdd38a..68da98ca6fcf 100644
--- a/drivers/clk/clkdev.c
+++ b/drivers/clk/clkdev.c
@@ -18,9 +18,12 @@
 #include <linux/clkdev.h>
 #include <linux/clk-provider.h>
 #include <linux/of.h>
+#include <linux/acpi.h>
 
 #include "clk.h"
 
+struct clk_hw *acpi_clk_get_hw(struct acpi_device *adev, int index,const char *con_id);
+
 static LIST_HEAD(clocks);
 static DEFINE_MUTEX(clocks_mutex);
 
@@ -104,13 +107,18 @@ struct clk *clk_get(struct device *dev, const char *con_id)
 
 	if (dev && dev->of_node) {
 		hw = of_clk_get_hw(dev->of_node, 0, con_id);
+		printk("of hw %x \n", hw);
 		if (!IS_ERR(hw) || PTR_ERR(hw) == -EPROBE_DEFER)
 			return clk_hw_create_clk(dev, hw, dev_id, con_id);
-	} else if(dev && has_acpi_companion(dev)){
-		hw = acpi_clk_get_hw(dev->of_node, 0, con_id);
-
+	} else if(has_acpi_companion(dev)){
+		// printk("acpi_clk_get_hw dev_id %s con_id %s \n", dev_id, con_id);
+		// hw = acpi_clk_get_hw(ACPI_COMPANION(dev), 0, con_id);
+		// printk("acpi hw %x \n", hw);
 	}
 
+	// printk("IS_ERR_OR_NULL(hw) %d  \n", IS_ERR_OR_NULL(hw));
+	// printk("PTR_ERR(hw) %d  \n", PTR_ERR(hw));
+	
 	return __clk_get_sys(dev, dev_id, con_id);
 }
 EXPORT_SYMBOL(clk_get);
-- 
2.34.1

