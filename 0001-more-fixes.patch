From b871ded38025456f7b1bcbeb137f5e1ed2900dd0 Mon Sep 17 00:00:00 2001
From: Niyas Sait <niyassait@gmail.com>
Date: Mon, 7 Aug 2023 10:17:34 +0100
Subject: [PATCH] more fixes

---
 drivers/acpi/acpi_clk.c      |  5 ++++-
 drivers/clk/clk-fixed-rate.c | 13 ++++++++++++-
 drivers/clk/clk.c            |  9 +++++++++
 drivers/devfreq/imx8m-ddrc.c |  4 ++++
 include/linux/acpi.h         |  2 ++
 5 files changed, 31 insertions(+), 2 deletions(-)

diff --git a/drivers/acpi/acpi_clk.c b/drivers/acpi/acpi_clk.c
index 23b920bc0f63..68cdd4f8947a 100644
--- a/drivers/acpi/acpi_clk.c
+++ b/drivers/acpi/acpi_clk.c
@@ -80,10 +80,13 @@ void acpi_clk_register(struct acpi_device *adev, int index)
 		printk("adev->dev %x \n", adev->dev);
 		printk("&adev->dev %x \n", &adev->dev);
 		
+		printk("dev_name(&adev->dev) %s \n", dev_name(&adev->dev));
+
 		clk = clk_register_fixed_rate(&adev->dev, dev_name(&adev->dev), NULL, 0, rate);
 		printk("clk %x \n", clk);
+		BUG_ON(IS_ERR(clk));
 		if (!IS_ERR(clk))
-			clk_register_clkdev(clk, dev_name(&adev->dev), NULL);
+			clk_register_clkdev(clk, NULL, dev_name(&adev->dev));
 
 		printk("Registered ACPI Clock device \n");
 		// return clk_hw_register_fixed_rate_with_accuracy(&adev->dev, dev_name(&adev->dev), NULL, 0, rate, 0);
diff --git a/drivers/clk/clk-fixed-rate.c b/drivers/clk/clk-fixed-rate.c
index ac68a6b40f0e..3f37f30268d7 100644
--- a/drivers/clk/clk-fixed-rate.c
+++ b/drivers/clk/clk-fixed-rate.c
@@ -66,6 +66,8 @@ struct clk_hw *__clk_hw_register_fixed_rate(struct device *dev,
 	if (!fixed)
 		return ERR_PTR(-ENOMEM);
 
+	BUG_ON(name == NULL);
+	
 	init.name = name;
 	init.ops = &clk_fixed_rate_ops;
 	init.flags = flags;
@@ -82,13 +84,19 @@ struct clk_hw *__clk_hw_register_fixed_rate(struct device *dev,
 	fixed->fixed_rate = fixed_rate;
 	fixed->fixed_accuracy = fixed_accuracy;
 	fixed->hw.init = &init;
-
+	
 	/* register the clock */
 	hw = &fixed->hw;
+
+	BUG_ON(hw->init->name == NULL);
+
 	if (dev || !np)
 		ret = clk_hw_register(dev, hw);
 	else
 		ret = of_clk_hw_register(np, hw);
+
+	printk("clk_hw_register %d \n", ret);
+
 	if (ret) {
 		kfree(fixed);
 		hw = ERR_PTR(ret);
@@ -106,6 +114,9 @@ struct clk *clk_register_fixed_rate(struct device *dev, const char *name,
 
 	hw = clk_hw_register_fixed_rate_with_accuracy(dev, name, parent_name,
 						      flags, fixed_rate, 0);
+
+	printk("clk-fixed-rate %x \n", hw);
+
 	if (IS_ERR(hw))
 		return ERR_CAST(hw);
 	return hw->clk;
diff --git a/drivers/clk/clk.c b/drivers/clk/clk.c
index f00d4c1158d7..f75f40d0afbb 100644
--- a/drivers/clk/clk.c
+++ b/drivers/clk/clk.c
@@ -3922,6 +3922,9 @@ __clk_register(struct device *dev, struct device_node *np, struct clk_hw *hw)
 		goto fail_out;
 	}
 
+	if(init->name)
+		printk("init->name %s \n", init->name);
+		
 	core->name = kstrdup_const(init->name, GFP_KERNEL);
 	if (!core->name) {
 		ret = -ENOMEM;
@@ -3965,6 +3968,8 @@ __clk_register(struct device *dev, struct device_node *np, struct clk_hw *hw)
 	clk_core_link_consumer(core, hw->clk);
 
 	ret = __clk_core_init(core);
+
+	printk("ret %x \n", ret);
 	if (!ret)
 		return hw->clk;
 
@@ -3976,13 +3981,17 @@ __clk_register(struct device *dev, struct device_node *np, struct clk_hw *hw)
 	hw->clk = NULL;
 
 fail_create_clk:
+	printk("fail_create_clk\n");
 	clk_core_free_parent_map(core);
 fail_parents:
 fail_ops:
+	printk("fail_parewnts or fail_ops\n");
 	kfree_const(core->name);
 fail_name:
+	printk("fail_name\n");
 	kfree(core);
 fail_out:
+	printk("fail_out\n");
 	return ERR_PTR(ret);
 }
 
diff --git a/drivers/devfreq/imx8m-ddrc.c b/drivers/devfreq/imx8m-ddrc.c
index 1891bbf809f4..bb8ffff13c47 100644
--- a/drivers/devfreq/imx8m-ddrc.c
+++ b/drivers/devfreq/imx8m-ddrc.c
@@ -376,6 +376,8 @@ static void imx8m_ddrc_exit(struct device *dev)
 	dev_pm_opp_of_remove_table(dev);
 }
 
+void acpi_clk_register(struct acpi_device *adev, int index);
+
 static int imx8m_ddrc_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -383,6 +385,8 @@ static int imx8m_ddrc_probe(struct platform_device *pdev)
 	const char *gov = DEVFREQ_GOV_USERSPACE;
 	int ret;
 
+	// acpi_clk_register(ACPI_COMPANION(&pdev->dev), 0);
+
 	struct clk *clk = devm_clk_get(&pdev->dev, NULL);
 	printk("imx8m-ddrc clk %x \n", clk);
 	printk("clk->getrate %d \n", clk_get_rate(clk));
diff --git a/include/linux/acpi.h b/include/linux/acpi.h
index fbed1db1bfd2..b6fe0e3231d8 100644
--- a/include/linux/acpi.h
+++ b/include/linux/acpi.h
@@ -1488,4 +1488,6 @@ static inline void acpi_device_notify(struct device *dev) { }
 static inline void acpi_device_notify_remove(struct device *dev) { }
 #endif
 
+void acpi_clk_register(struct acpi_device *adev, int index);
+
 #endif	/*_LINUX_ACPI_H*/
-- 
2.34.1

